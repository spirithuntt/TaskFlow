package taskflow.controllers;
// Generated by CodiumAI

import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import taskflow.dto.request.TaskReplacementRequestDTO;
import taskflow.dto.response.TaskReplacementResponseDTO;
import taskflow.service.TaskReplacementService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


public class TaskReplacementControllerTest {
    @Test
    public void test_create_delete_task_replacement_success() {
        TaskReplacementRequestDTO requestDTO = new TaskReplacementRequestDTO();

        TaskReplacementResponseDTO responseDTO = new TaskReplacementResponseDTO();

        TaskReplacementService taskReplacementService = mock(TaskReplacementService.class);
        when(taskReplacementService.createDeleteTaskReplacement(requestDTO)).thenReturn(responseDTO);
    
        TaskReplacementController controller = new TaskReplacementController(taskReplacementService);
        //! Invoking the method
        ResponseEntity<TaskReplacementResponseDTO> response = controller.createDeleteTaskReplacement(requestDTO);
    
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(responseDTO, response.getBody());
    }

    @Test
    public void test_create_delete_task_replacement_invalid_request_data() {
        TaskReplacementRequestDTO requestDTO = new TaskReplacementRequestDTO();

        TaskReplacementResponseDTO responseDTO = new TaskReplacementResponseDTO("error", "Invalid request data");
    
        TaskReplacementService taskReplacementService = mock(TaskReplacementService.class);
        when(taskReplacementService.createDeleteTaskReplacement(requestDTO)).thenReturn(responseDTO);
    
        TaskReplacementController controller = new TaskReplacementController(taskReplacementService);
    
        ResponseEntity<TaskReplacementResponseDTO> response = controller.createDeleteTaskReplacement(requestDTO);
    
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(responseDTO, response.getBody());
    }

    @Test
    public void test_create_edit_task_replacement_invalid_request_data() {
        TaskReplacementRequestDTO requestDTO = new TaskReplacementRequestDTO();

        TaskReplacementResponseDTO responseDTO = new TaskReplacementResponseDTO("error", "Invalid request data");
    
        TaskReplacementService taskReplacementService = mock(TaskReplacementService.class);
        when(taskReplacementService.createEditTaskReplacement(requestDTO)).thenReturn(responseDTO);
    
        TaskReplacementController controller = new TaskReplacementController(taskReplacementService);
    
        ResponseEntity<TaskReplacementResponseDTO> response = controller.createEditTaskReplacement(requestDTO);
    
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(responseDTO, response.getBody());
    }

}